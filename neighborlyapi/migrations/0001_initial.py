# Generated by Django 3.1.4 on 2021-01-03 05:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='DescriptionAccuracy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
                ('description', models.CharField(max_length=500)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('listed_date', models.DateField(blank=True, null=True)),
                ('brand', models.CharField(blank=True, max_length=255, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='cat_items', to='neighborlyapi.category')),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='cond_items', to='neighborlyapi.condition')),
            ],
        ),
        migrations.CreateModel(
            name='MessageStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Neighbor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.CharField(max_length=500)),
                ('phone_number', models.CharField(max_length=15)),
                ('street_one', models.CharField(max_length=100)),
                ('street_two', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=2)),
                ('zip', models.CharField(max_length=12)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
                ('score', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='ReservationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_start', models.DateField(blank=True, null=True)),
                ('scheduled_end', models.DateField(blank=True, null=True)),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations_sent', to='neighborlyapi.neighbor')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='neighborlyapi.item')),
                ('lender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations_received', to='neighborlyapi.neighbor')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neighborlyapi.reservationstatus')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_date', models.DateField(blank=True, null=True)),
                ('read_date', models.DateField(blank=True, null=True)),
                ('body', models.TextField(max_length=2000)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='received_messages', to='neighborlyapi.neighbor')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='neighborlyapi.reservation')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sent_messages', to='neighborlyapi.neighbor')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='neighborlyapi.messagestatus')),
            ],
        ),
        migrations.CreateModel(
            name='ItemTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itemtags', to='neighborlyapi.item')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itemtags', to='neighborlyapi.tag')),
            ],
        ),
        migrations.CreateModel(
            name='ItemReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created_date', models.DateField(blank=True, null=True)),
                ('details', models.DateField(blank=True, null=True)),
                ('description_accuracy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='neighborlyapi.descriptionaccuracy')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_reviews', to='neighborlyapi.item')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='neighborlyapi.reservation')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items_reviewed', to='neighborlyapi.neighbor')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='neighborlyapi.neighbor'),
        ),
    ]
